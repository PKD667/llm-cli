#!/bin/bash


if [ -z "$OPENAI_API_KEY" ]; then
    echo "Please set your OPENAI_API_KEY environment variable."
    exit
fi

# Ensure jq is installed for JSON processing
if ! command -v jq &> /dev/null
then
    echo "jq could not be found, please install it to continue."
    exit
fi

# set MAX_TOKENS to 512 if not set
if [ -z "$MAX_TOKENS" ]; then
    MAX_TOKENS=512
fi




function complete() {

    # check if MODEL_ID is set
    if [ -z "$MODEL_ID" ]; then
        MODEL_ID="gpt-3.5-turbo-instruct"
    fi


    # Capture user input
    PROMPT=$1

    # OpenAI API call
    RESPONSE=$(curl -s https://api.openai.com/v1/completions \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $OPENAI_API_KEY" \
      -d '{
      "model": "'"$MODEL_ID"'",
      "prompt": "'"$PROMPT"'",
      "max_tokens": '"$MAX_TOKENS"'
    }')

    #echo $RESPONSE


    # Display response
    echo $(echo $RESPONSE | jq -r '.choices[0].text')
    return 0
}

function ask() {

    # check if MODEL_ID is set
    if [ -z "$MODEL_ID" ]; then
        MODEL_ID="gpt-4o-mini"
    fi


    # Capture user input
    PROMPT=$1

    # OpenAI API call
    RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $OPENAI_API_KEY" \
      -d '{
      "model": "'"$MODEL_ID"'",
      "max_tokens": '"$MAX_TOKENS"',
      "messages": [
        {
          "role": "system",
          "content": "You are a helpful assistant. You will be asked questions by the user and you will provide answers."
        },
        {
          "role": "user",
          "content": "'"$PROMPT"'"
        }
      ]
    }')

    #echo $RESPONSE

    # Display response
    echo $(echo $RESPONSE | jq -r '.choices[0].message.content')
    return 0
}


if [ "$1" == "complete" ]; then
    complete "$2"
elif [ "$1" == "ask" ]; then
    ask "$2"
else
    echo "Usage: openai complete|ask <prompt>"
fi
